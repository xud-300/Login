from django.db.models.signals import post_save  # Импортируем сигнал post_save, который отправляется после сохранения объекта модели.
from django.contrib.auth.models import User  # Импортируем модель User, встроенную в Django для управления пользователями.
from django.dispatch import receiver  # Импортируем декоратор receiver, который используется для подключения функций-обработчиков сигналов.
from .models import Profile  # Импортируем модель Profile, которая расширяет стандартную модель User, добавляя дополнительные поля.

# Этот сигнал вызывается каждый раз после создания нового объекта User (пользователя).
@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    """
    Функция-обработчик сигнала, которая вызывается после создания нового пользователя.
    Если пользователь был успешно создан, создается профиль для этого пользователя.

    Аргументы:
    - sender: Модель, которая отправила сигнал (в данном случае, User).
    - instance: Экземпляр модели User, для которого вызван сигнал.
    - created: Логическое значение, указывающее, был ли пользователь создан.
    - kwargs: Дополнительные аргументы, переданные сигналом.
    """
    if created:  # Проверяем, был ли объект User только что создан.
        Profile.objects.create(user=instance)  # Создаем профиль для нового пользователя, используя созданный экземпляр User.
        print(f"Profile created for user: {instance.username}")  # Выводим сообщение в консоль для подтверждения создания профиля.

# Этот сигнал вызывается каждый раз после сохранения объекта User (пользователя).
@receiver(post_save, sender=User)
def save_profile(sender, instance, **kwargs):
    """
    Функция-обработчик сигнала, которая вызывается после сохранения пользователя.
    Эта функция пытается сохранить связанный профиль пользователя.
    Если профиль не существует, он создается.

    Аргументы:
    - sender: Модель, которая отправила сигнал (в данном случае, User).
    - instance: Экземпляр модели User, для которого вызван сигнал.
    - kwargs: Дополнительные аргументы, переданные сигналом.
    """
    try:
        instance.profile.save()  # Пытаемся сохранить профиль, связанный с данным пользователем.
    except Profile.DoesNotExist:  # Обрабатываем исключение, если профиль не существует.
        Profile.objects.create(user=instance)  # Если профиль не существует, создаем его.
        print(f"Profile created on save for user: {instance.username}")  # Выводим сообщение в консоль для подтверждения создания профиля.
